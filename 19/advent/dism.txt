0: x_3 = 16, jmp 17
1: x_1 = 1
2: x_4 = 1
3: x_5 = x_1*x_4
4,5,6: if x_2 == x_5
  jmp 7
else
 jmp 8
end
7: x_0 = x_0 + x_1
8: x_4 = x_4 + 1
9: if x_4 > x_2
  jmp 12
else
  jmp 3
end
12: x_1 = x_1 + 1
13,14,15: if x_1 > x_2
  jmp 16
else
  jmp 2
end
16: jmp 18*18 -> end

17: x_2 = x_2 + 2
18: x_2 = x_2 * x_2
19: x_2 = 19 * x_2
20: x_2 = x_2 * 11
21: x_5 = x_5 + 3
22: x_5 = x_5 * 22
23: x_5 = x_5 + 3
24: x_2 = x_2 + x_5
25: if x_0 == 0 jmp 26 else: jmp 27
26: jmp 1
27: x_5 = 27
28: x_5 = x_5 * 28
29: x_5 = x_5 + 29
30: x_5 = x_5 * 30
31: x_5 = x_5 * 14
32: x_5 = x_5 * 32
33: x_2 = x_2 + x_5
34: x_0 = 0
35: jmp 1

// The final dissassembled version of the input is
// equivalent to this rust function, where the input
// reg_0 is the value that register zero starts at: 0 or 1

fn run(reg_0: u64) -> u64 {
  let num = 3*22+3 + 4*19*11 + reg_0*((27*28+29)*30*14*32);
  let mut factor = 1;
  let mut result = 0;
  while factor <= num {
    let mut guess = 1;
    while guess <= num {
      if guess * factor == num {
        result += factor;
      } else {
        guess += 1;
      }
    }
    factor += 1;
  }
  return result
}

// But this function is just summing up the factors of `num`
// so we can do that much more directly

